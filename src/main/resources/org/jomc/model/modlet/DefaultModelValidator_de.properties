# $JOMC$
moduleSpecificationReferenceDeclarationConstraint=Modul ''{0}'' kann keine Spezifikationen referenzieren (''{1}'').
moduleImplementationReferenceDeclarationConstraint=Modul ''{0}'' kann keine Implementierungen referenzieren (''{1}'').
moduleMessageReferenceDeclarationConstraint=Modul ''{0}'' kann keine Meldungen referenzieren (''{1}'').
moduleFinalMessageConstraint=Modul ''{0}'' kann keine Meldungen final kennzeichnen (''{1}'').
moduleOverrideMessageConstraint=Modul ''{0}'' kann keine Meldungen \u00fcberschreibend kennzeichnen (''{1}'').
moduleFinalPropertyConstraint=Modul ''{0}'' kann keine Eigenschaften final kennzeichnen (''{1}'').
moduleOverridePropertyConstraint=Modul ''{0}'' kann keine Eigenschaften \u00fcberschreibend kennzeichnen (''{1}'').
modulePropertyReferenceDeclarationConstraint=Modul ''{0}'' kann keine Eigenschaften referenzieren (''{1}'').
implementationSpecificationDeclarationConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann keine Spezifikationen definieren (''{2}'').
implementationImplementationDeclarationConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann keine ''{2}'' Implementierung definieren.
implementationAbstractLocationDeclarationConstraint=Abstrakte Implementierung ''{0}'' aus Module ''{1}'' kann keinen ''{2}'' Ort definieren.
implementationInheritanceCycleConstraint=Implementierung ''{0}'' aus Modul ''{1}'' definiert eine zyklische Vererbungshierarchie ({2}).
implementationSpecificationVersioningConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann keine Versionierung f\u00fcr Spezifikation ''{2}'' aus Modul ''{3}'' verwenden. Spezifikation ''{2}'' hat keine Version.
implementationSpecificationCompatibilityConstraint=Implementierung ''{0}'' aus Modul ''{1}'' implementiert Version ''{4}'' der Spezifikation ''{2}'' aus Modul ''{3}''. Ben\u00f6tigte Implementierungsstufe ist ''{5}''.
implementationDependencySpecificationVersioningConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann keine Versionierung f\u00fcr Spezifikation ''{3}'' aus Modul ''{4}'' der Anforderung ''{2}'' verwenden. Spezifikation ''{3}'' hat keine Version.
implementationDependencySpecificationCompatibilityConstraint=Implementierung ''{0}'' aus Modul ''{1}'' h\u00e4ngt von Version ''{4}'' der Spezifikation ''{2}'' aus Modul ''{3}'' ab. Verf\u00fcgbare Spezifikationsstufe ist ''{5}''.
implementationDependencyPropertyReferenceDeclarationConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' kann keine Eigenschaften referenzieren (''{3}'').
implementationDependencyPropertiesOverrideConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' kann Eigenschaft ''{3}'' aufgrund des Geltungsbereichs ''{6}'' der Spezifikation ''{4}'' aus Modul ''{5}'' nicht \u00fcberschreiben.
implementationMandatoryDependencyConstraint=Keine Implementierungen f\u00fcr nicht-optionale Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' verf\u00fcgbar.
implementationImplementationVersioningConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann keine Versionierung f\u00fcr Implementierung ''{2}'' aus Modul ''{3}'' verwenden. Implementierung ''{2}'' hat keine Version.
implementationInheritanceCompatibilityConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann nicht von Implementierung ''{2}'' aus Modul ''{3}'' in Version ''{4}'' erben. Erwartete Implementierungsstufe ist ''{5}''.
implementationFinalImplementationConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann nicht von finaler Implementierung ''{2}'' aus Modul ''{3}'' erben.
implementationImplementationOverrideConstraint=Implementierung ''{0}'' \u00fcberschreibt keine ''{1}'' Implementierungs-Referenz.
implementationSpecificationOverrideConstraint=Implementierung ''{0}'' aus Modul ''{1}'' \u00fcberschreibt keine ''{2}'' Spezifikations-Referenz.
implementationSpecificationFinalConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann finale Spezifikations-Referenz ''{2}'' der Implementierung ''{3}'' aus Modul ''{4}'' nicht \u00fcberschreiben ({5}).
implementationDependencyOverrideConstraint=Implementierung ''{0}'' aus Modul ''{1}'' \u00fcberschreibt keine ''{2}'' Anforderung.
implementationDependencyFinalConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann finale Anforderung ''{2}'' der Implementierung ''{3}'' aus Modul ''{4}'' nicht \u00fcberschreiben ({5}).
implementationMessageOverrideConstraint=Implementierung ''{0}'' aus Modul ''{1}'' \u00fcberschreibt keine ''{2}'' Meldung.
implementationMessageFinalConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann finale Meldung ''{2}'' der Implementierung ''{3}'' aus Modul ''{4}'' nicht \u00fcberschreiben ({5}).
implementationPropertyOverrideConstraint=Implementierung ''{0}'' aus Modul ''{1}'' \u00fcberschreibt keine ''{2}'' Eigenschaft.
implementationPropertyFinalConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann finale Eigenschaft ''{2}'' der Implementierung ''{3}'' aus Modul ''{4}'' nicht \u00fcberschreiben ({5}).
implementationMessagesUniquenessConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann nur eine ''{2}'' Meldung definieren.
implementationPropertiesUniquenessConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann nur eine ''{2}'' Eigenschaft definieren.
implementationMultipleInheritanceSpecificationConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann Spezifikations-Reference ''{2}'' nicht mehrfach erben ({3}).
implementationMultipleInheritanceDependencyConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann Anforderung ''{2}'' nicht mehrfach erben ({3}).
implementationMultipleInheritanceMessageConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann Meldung ''{2}'' nicht mehrfach erben ({3}).
implementationMultipleInheritancePropertyConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann Eigenschaft ''{2}'' nicht mehrfach erben ({3}).
specificationImplementationNameConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann Spezifikation ''{2}'' aus Modul ''{3}'' nicht mit Namen ''{4}'' implementieren. Name nicht eindeutig.
specificationMultiplicityConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann Spezifikation ''{2}'' aus Modul ''{3}'' aufgrund von Kardinalit\u00e4t ''{4}'' nicht implementieren. Mehr als eine Implementierung nicht erlaubt.
specificationPropertyReferenceDeclarationConstraint=Spezifikation ''{0}'' aus Modul ''{1}'' kann Eigenschaft ''{2}'' nicht referenzieren.
implementationFinalImplementatioReferenceConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann finale Implementierungs-Referenz ''{2}'' der Implementierung ''{3}'' aus Modul ''{4}'' nicht \u00fcberschreiben ({5}).
implementationDependencySpecificationClassConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' kann Spezifikation ''{3}'' aus Modul ''{4}'' ohne Klasse nicht verwenden.
implementationDependencyFinalPropertyConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' kann finale Eigenschaft ''{3}'' der Implementierung ''{4}'' aus Modul ''{5}'' nicht \u00fcberschreiben ({6}).
implementationDependencyOverridePropertyConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' \u00fcberschreibt keine ''{3}''-Eigenschaft der Implementierung ''{4}'' aus Modul ''{5}''.
specificationClassConstraint=Spezifikation ''{0}'' aus Modul ''{1}'' kann nicht als Klassen-Deklaration gekennzeichnet sein. Keine Klasse angegeben.
implementationClassConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann nicht als Klassen-Deklaration gekennzeichnet sein. Keine Klasse angegeben.
specificationClassDeclarationConstraint=Spezifikation ''{0}'' aus Modul ''{1}'' kann nicht als Klasse ''{2}'' deklarierend gekennzeichnet sein. Spezifikation ''{3}'' aus Modul ''{4}'' bereits als Klasse ''{2}'' deklarierend gekennzeichnet.
implementationClassDeclarationConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann nicht als Klasse ''{2}'' deklarierend gekennzeichnet sein. Implementierung ''{3}'' aus Modul ''{4}'' bereits als Klasse ''{2}'' deklarierend gekennzeichnet.
implementationMessageTemplateConstraint=Vorlage ''{3}'' der Meldung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keine Java-''MessageFormat''-Schablone zur Verf\u00fcgung.{4}
modulePropertyValueConstraint=Eigenschaft ''{1}'' in Modul ''{0}'' kann keinen Wert und ein Objekt definieren.
implementationPropertyValueConstraint=Eigenschaft ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' kann keinen Wert und ein Objekt definieren.
modulePropertyTypeConstraint=Eigenschaft ''{1}'' in Modul ''{0}'' kann kein Objekt ohne Typ definieren.
implementationPropertyTypeConstraint=Eigenschaft ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' kann kein Objekt ohne Typ definieren.
specificationPropertyValueConstraint=Eigenschaft ''{2}'' der Spezifikation ''{0}'' aus Modul ''{1}'' kann keinen Wert und ein Objekt definieren.
specificationPropertyTypeConstraint=Eigenschaft ''{2}'' der Spezifikation ''{0}'' aus Modul ''{1}'' kann kein Objekt ohne Typ definieren.
modulePropertyJavaValueConstraint=Eigenschaft ''{1}'' aus Modul ''{0}'' stellt kein Javaobjekt zur Verf\u00fcgung.{2}
specificationPropertyJavaValueConstraint=Eigenschaft ''{2}'' der Spezifikation ''{0}'' aus Modul ''{1}'' stellt kein Javaobjekt zur Verf\u00fcgung.{3}
implementationPropertyJavaValueConstraint=Eigenschaft ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt kein Javaobjekt zur Verf\u00fcgung.{3}
implementationDependencyDependenciesOverrideConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' kann Anforderung ''{3}'' aufgrund des Geltungsbereichs ''{6}'' der Spezifikation ''{4}'' aus Modul ''{5}'' nicht \u00fcberschreiben.
implementationDependencyMessagesOverrideConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' kann Meldung ''{3}'' aufgrund des Geltungsbereichs ''{6}'' der Spezifikation ''{4}'' aus Modul ''{5}'' nicht \u00fcberschreiben.
implementationDependencyFinalDependencyConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' kann finale Anforderung ''{3}'' der Implementierung ''{4}'' aus Modul ''{5}'' nicht \u00fcberschreiben ({6}).
implementationDependencyOverrideDependencyConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' \u00fcberschreibt keine ''{3}'' Anforderung der Implementierung ''{4}'' aus Modul ''{5}''.
implementationDependencyFinalMessageConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' kann finale Meldung ''{3}'' der Implementierung ''{4}'' aus Modul ''{5}'' nicht \u00fcberschreiben ({6}).
implementationDependencyOverrideMessageConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' \u00fcberschreibt keine ''{3}'' Meldung der Implementierung ''{4}'' aus Modul ''{5}''.
implementationDependencyMessageReferenceDeclarationConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' kann Meldung ''{3}'' nicht referenzieren.
implementationDependencyPropertyValueConstraint=Eigenschaft ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' kann keinen Wert und ein Objekt definieren.
implementationDependencyPropertyTypeConstraint=Eigenschaft ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' kann kein Objekt ohne Typ definieren.
implementationDependencyPropertyJavaValueConstraint=Eigenschaft ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt kein Javaobjekt zur Verf\u00fcgung.{4}
moduleMessageTemplateConstraint=Vorlage ''{2}'' der Meldung ''{1}'' aus Modul ''{0}'' stellt keine Java-''MessageFormat''-Schablone zur Verf\u00fcgung.{3}
implementationDependencyMultiplicityConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' kann Anforderung ''{3}'' der Implementierung ''{4}'' aus Modul ''{5}'' aufgrund inkompatibler Kardinalit\u00e4t ''{6}'' nicht \u00fcberschreiben. Erwartet ''{7}''.
implementationDependencyScopeConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' kann Anforderung ''{3}'' der Implementierung ''{4}'' aus Modul ''{5}'' aufgrund des inkompatiblen Geltungsbereichs ''{6}'' nicht \u00fcberschreiben. Erwartet ''{7}''.
implementationDependencyNoImplementationNameConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' kann Anforderung ''{3}'' der Implementierung ''{4}'' aus Modul ''{5}'' nicht ohne Implementierungs-Namen \u00fcberschreiben.
implementationDependencyImplementationNameConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' kann Anforderung ''{3}'' der Implementierung ''{4}'' aus Modul ''{5}'' nicht mit Implementierungs-Namen \u00fcberschreiben (''{6}'').
implementationDependencyOptonalityConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' kann Anforderung ''{3}'' der Implementierung ''{4}'' aus Modul ''{5}'' nicht mit inkompatibler Optionalit\u00e4t \u00fcberschreiben.
implementationInheritanceCompatibilityParseException=Implementierung ''{0}'' aus Modul ''{1}'' kann nicht von Implementierung ''{2}'' aus Modul ''{3}'' unter Verwendung der Version ''{4}'' erben.{5}
implementationInheritanceCompatiblityVersioningTokenManagerError=Implementierung ''{0}'' aus Modul ''{1}'' kann nicht von Implementierung ''{2}'' aus Modul ''{3}'' unter Verwendung der Version ''{4}'' erben.{5}
implementationSpecificationCompatibilityVersioningParseException=Implementierung ''{0}'' aus Modul ''{1}'' implementiert Version ''{4}'' der Spezifikation ''{2}'' aus Modul ''{3}''.{5}
implementationSpecificationCompatibilityVersioningTokenManagerError=Implementierung ''{0}'' aus Modul ''{1}'' implementiert Version ''{4}'' der Spezifikation ''{2}'' aus Modul ''{3}''.{5}
implementationDependencySpecificationCompatibilityParseException=Implementierung ''{0}'' aus Modul ''{1}'' kann nicht von Version ''{4}'' der Spezifikation ''{2}'' aus Modul ''{3}'' abh\u00e4ngen.{5}
implementationDependencySpecificationCompatibilityTokenMgrError=Implementierung ''{0}'' aus Modul ''{1}'' kann nicht von Version ''{4}'' der Spezifikation ''{2}'' aus Modul ''{3}'' abh\u00e4ngen.{5}
implementationMultipleInheritanceXmlElementConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann XML-Element ''{2}'' nicht mehrfach erben ({3}).
implementationMultipleInheritanceJaxbElementConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann XML-Element ''{2}'' nicht mehrfach erben ({3}).
implementationDependencyOverrideWarning=Implementierung ''{0}'' aus Modul ''{1}'' \u00fcberschreibt Anforderung ''{2}'' der Implementierung ''{3}'' aus Modul ''{4}'' ohne ''Override''-Kennzeichen ({5}).
implementationImplementationOverrideWarning=Implementierung ''{0}'' aus Modul ''{1}'' \u00fcberschreibt Implementierungs-Referenz ''{2}'' der Implementierung ''{3}'' aus Modul ''{4}'' ohne ''Override''-Kennzeichen ({5}).
implementationMessageOverrideWarning=Implementierung ''{0}'' aus Modul ''{1}'' \u00fcberschreibt Meldung ''{2}'' der Implementierung ''{3}'' aus Modul ''{4}'' ohne ''Override''-Kennzeichen ({5}).
implementationPropertyOverrideWarning=Implementierung ''{0}'' aus Modul ''{1}'' \u00fcberschreibt Eigenschaft ''{2}'' der Implementierung ''{3}'' aus Modul ''{4}'' ohne ''Override''-Kennzeichen ({5}).
implementationSpecificationOverrideWarning=Implementierung ''{0}'' aus Modul ''{1}'' \u00fcberschreibt Spezifikations-Referenz ''{2}'' der Implementierung ''{3}'' aus Modul ''{4}'' ohne ''Override''-Kennzeichen ({5}).
implementationDependencyOverrideDependencyWarning=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' \u00fcberschreibt Anforderung ''{3}'' der Implementierung ''{4}'' aus Modul ''{5}'' ohne ''Override''-Kennzeichen ({6}).
implementationDependencyOverrideMessageWarning=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' \u00fcberschreibt Meldung ''{3}'' der Implementierung ''{4}'' aus Modul ''{5}'' ohne ''Override''-Kennzeichen ({6}).
implementationDependencyOverridePropertyWarning=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' \u00fcberschreibt Eigenschaft ''{3}'' der Implementierung ''{4}'' aus Modul ''{5}'' ohne ''Override''-Kennzeichen ({6}).
implementationJaxbElementOverrideConstraint=Implementierung ''{0}'' aus Modul ''{1}'' \u00fcberschreibt kein ''{2}'' XML-Element.
implementationJaxbElementFinalConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann finales XML-Element ''{2}'' der Implementierung ''{3}'' aus Modul ''{4}'' nicht \u00fcberschreiben ({5}).
implementationJaxbElementOverrideWarning=Implementierung ''{0}'' aus Modul ''{1}'' \u00fcberschreibt XML-Element ''{2}'' der Implementierung ''{3}'' aus Modul ''{4}'' ohne ''Override''-Kennzeichen ({5}).
implementationSpecificationPropertyOverrideWarning=Implementierung ''{0}'' aus Modul ''{1}'' \u00fcberschreibt Eigenschaft ''{2}'' der Spezifikation ''{3}'' aus Modul ''{4}'' ohne ''Override''-Kennzeichen ({5}).
implementationJavaTypeNameConstraint=Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Typ-Namen zur Verf\u00fcgung.{2}
implementationJavaClassDeclarationConstraint=Implementierung ''{0}'' aus Modul ''{1}'' kann nicht als Javaklasse ''{2}'' deklarierend gekennzeichnet sein. Implementierung ''{3}'' aus Modul ''{4}'' bereits als Javaklasse ''{2}'' deklarierend gekennzeichnet.
specificationJavaTypeNameConstraint=Spezifikation ''{0}'' aus Modul ''{1}'' stellt keinen Java-Typ-Namen zur Verf\u00fcgung.{2}
specificationJavaClassDeclarationConstraint=Spezifikation ''{0}'' aus Modul ''{1}'' kann nicht als Javaklasse ''{2}'' deklarierend gekennzeichnet sein. Spezifikation ''{3}'' aus Modul ''{4}'' bereits als Javaklasse ''{2}'' deklarierend gekennzeichnet.
specificationPropertyJavaConstantNameConstraint=Eigenschaft ''{2}'' der Spezifikation ''{0}'' aus Modul ''{1}'' stellt keinen Java-Konstanten-Namen zur Verf\u00fcgung.{3}
specificationPropertyJavaGetterMethodNameConstraint=Eigenschaft ''{2}'' der Spezifikation ''{0}'' aus Modul ''{1}'' stellt keinen Java-Zugriffsmethoden-Namen zur Verf\u00fcgung.{3}
specificationPropertyJavaSetterMethodNameConstraint=Eigenschaft ''{2}'' der Spezifikation ''{0}'' aus Modul ''{1}'' stellt keinen Java-Zugriffsmethoden-Namen zur Verf\u00fcgung.{3}
specificationPropertyJavaTypeNameConstraint=Eigenschaft ''{2}'' der Spezifikation ''{0}'' aus Modul ''{1}'' stellt keinen Java-Typ-Namen zur Verf\u00fcgung.{3}
specificationPropertyJavaVariableNameConstraint=Eigenschaft ''{2}'' der Spezifikation ''{0}'' aus Modul ''{1}'' stellt keinen Java-Variablen-Namen zur Verf\u00fcgung.{3}
modulePropertyJavaConstantNameConstraint=Eigenschaft ''{1}'' aus Modul ''{0}'' stellt keinen Java-Konstanten-Namen zur Verf\u00fcgung.{2}
modulePropertyJavaGetterMethodNameConstraint=Eigenschaft ''{1}'' aus Modul ''{0}'' stellt keinen Java-Zugriffsmethoden-Namen zur Verf\u00fcgung.{2}
modulePropertyJavaSetterMethodNameConstraint=Eigenschaft ''{1}'' aus Modul ''{0}'' stellt keinen Java-Zugriffsmethoden-Namen zur Verf\u00fcgung.{2}
modulePropertyJavaTypeNameConstraint=Eigenschaft ''{1}'' aus Modul ''{0}'' stellt keinen Java-Typ-Namen zur Verf\u00fcgung.{2}
modulePropertyJavaVariableNameConstraint=Eigenschaft ''{1}'' aus Modul ''{0}'' stellt keinen Java-Variablen-Namen zur Verf\u00fcgung.{2}
implementationDependencyJavaConstantNameConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Konstanten-Namen zur Verf\u00fcgung.{3}
implementationDependencyJavaGetterMethodNameConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Zugriffsmethoden-Namen zur Verf\u00fcgung.{3}
implementationDependencyJavaSetterMethodNameConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Zugriffsmethoden-Namen zur Verf\u00fcgung.{3}
implementationDependencyJavaVariableNameConstraint=Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Variablen-Namen zur Verf\u00fcgung.{3}
moduleMessageJavaConstantNameConstraint=Meldung ''{1}'' aus Modul ''{0}'' stellt keinen Java-Konstanten-Namen zur Verf\u00fcgung.{2}
moduleMessageJavaGetterMethodNameConstraint=Meldung ''{1}'' aus Modul ''{0}'' stellt keinen Java-Zugriffsmethoden-Namen zur Verf\u00fcgung.{2}
moduleMessageJavaSetterMethodNameConstraint=Meldung ''{1}'' aus Modul ''{0}'' stellt keinen Java-Zugriffsmethoden-Namen zur Verf\u00fcgung.{2}
moduleMessageJavaVariableNameConstraint=Meldung ''{1}'' aus Modul ''{0}'' stellt keinen Java-Variablen-Namen zur Verf\u00fcgung.{2}
moduleMessageTemplateMimeTypeConstraint=Vorlage ''{2}'' der Meldung ''{1}'' aus Modul ''{0}'' stellt keinen Java-''MimeType'' zur Verf\u00fcgung.{3}
moduleMessageArgumentJavaTypeNameConstraint=Argument ''{2}'' der Meldung ''{1}'' aus Modul ''{0}'' stellt keinen Java-Typ-Namen zur Verf\u00fcgung.{3}
moduleMessageArgumentJavaVariableNameConstraint=Argument {2,number} der Meldung ''{1}'' aus Modul ''{0}'' stellt keinen Java-Variablen-Namen zur Verf\u00fcgung.{3}
implementationMessageJavaConstantNameConstraint=Meldung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Konstanten-Namen zur Verf\u00fcgung.{3}
implementationMessageJavaGetterMethodNameConstraint=Meldung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Zugriffsmethoden-Namen zur Verf\u00fcgung.{3}
implementationMessageJavaSetterMethodNameConstraint=Meldung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Zugriffsmethoden-Namen zur Verf\u00fcgung.{3}
implementationMessageJavaVariableNameConstraint=Meldung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Variablen-Namen zur Verf\u00fcgung.{3}
implementationMessageArgumentJavaTypeNameConstraint=Argument ''{3}'' der Meldung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Typ-Namen zur Verf\u00fcgung.{4}
implementationMessageArgumentJavaVariableNameConstraint=Argument {3,number} der Meldung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Variablen-Namen zur Verf\u00fcgung.{4}
implementationPropertyJavaConstantNameConstraint=Eigenschaft ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Konstanten-Namen zur Verf\u00fcgung.{3}
implementationPropertyJavaGetterMethodNameConstraint=Eigenschaft ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Zugriffsmethoden-Namen zur Verf\u00fcgung.{3}
implementationPropertyJavaSetterMethodNameConstraint=Eigenschaft ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Zugriffsmethoden-Namen zur Verf\u00fcgung.{3}
implementationPropertyJavaTypeNameConstraint=Eigenschaft ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Typ-Namen zur Verf\u00fcgung.{3}
implementationPropertyJavaVariableNameConstraint=Eigenschaft ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Variablen-Namen zur Verf\u00fcgung.{3}
implementationDependencyPropertyJavaConstantNameConstraint=Eigenschaft ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Konstanten-Namen zur Verf\u00fcgung.{4}
implementationDependencyPropertyJavaGetterMethodNameConstraint=Eigenschaft ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Zugriffsmethoden-Namen zur Verf\u00fcgung.{4}
implementationDependencyPropertyJavaSetterMethodNameConstraint=Eigenschaft ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Zugriffsmethoden-Namen zur Verf\u00fcgung.{4}
implementationDependencyPropertyJavaTypeNameConstraint=Eigenschaft ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Typ-Namen zur Verf\u00fcgung.{4}
implementationDependencyPropertyJavaVariableNameConstraint=Eigenschaft ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Variablen-Namen zur Verf\u00fcgung.{4}
implementationDependencyMessageJavaConstantNameConstraint=Meldung ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Konstanten-Namen zur Verf\u00fcgung.{4}
implementationDependencyMessageJavaGetterMethodNameConstraint=Meldung ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Zugriffsmethoden-Namen zur Verf\u00fcgung.{4}
implementationDependencyMessageJavaSetterMethodNameConstraint=Meldung ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Zugriffsmethoden-Namen zur Verf\u00fcgung.{4}
implementationDependencyMessageJavaVariableNameConstraint=Meldung ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Variablen-Namen zur Verf\u00fcgung.{4}
implementationDependencyMessageTemplateMimeTypeConstraint=Vorlage ''{4}'' der Meldung ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-''MimeType'' zur Verf\u00fcgung.{5}
implementationDependencyMessageTemplateConstraint=Vorlage ''{4}'' der Meldung ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keine Java-''MessageFormat''-Schablone zur Verf\u00fcgung.{5}
implementationDependencyMessageArgumentJavaTypeNameConstraint=Argument ''{4}'' der Meldung ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' in Modul ''{1}'' stellt keinen Java-Typ-Namen zur Verf\u00fcgung.{5}
implementationDependencyMessageArgumentJavaVariableNameConstraint=Argument {4,number} der Meldung ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' in Modul ''{1}'' stellt keinen Java-Variablen-Namen zur Verf\u00fcgung.{5}
implementationMessageTemplateMimeTypeConstraint=Vorlage ''{3}'' der Meldung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Mime-Typen zur Verf\u00fcgung.{4}
implementationDependencyDependencyJavaConstantNameConstraint=Anforderung ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Konstanten-Namen zur Verf\u00fcgung.{4}
implementationDependencyDependencyJavaGetterMethodNameConstraint=Anforderung ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Zugriffsmethoden-Namen zur Verf\u00fcgung.{4}
implementationDependencyDependencyJavaSetterMethodNameConstraint=Anforderung ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Zugriffsmethoden-Namen zur Verf\u00fcgung.{4}
implementationDependencyDependencyJavaVariableNameConstraint=Anforderung ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt keinen Java-Variablen-Namen zur Verf\u00fcgung.{4}
moduleMessageArgumentJavaVariableNameUniquenessConstraint=Argument ''{2}'' der Meldung ''{1}'' aus Modul ''{0}'' stellt mehrdeutigen, bereits von Argument ''{4}'' zur Verf\u00fcgung gestellten, Java-Variablen-Namen ''{3}'' zur Verf\u00fcgung.
implementationMessageArgumentJavaVariableNameUniquenessConstraint=Argument ''{3}'' der Meldung ''{2}'' der Implementierung ''{0}'' aus Modul ''{1}'' stellt mehrdeutigen, bereits von Argument ''{5}'' zur Verf\u00fcgung gestellten Java-Variablen-Namen ''{4}'' zur Verf\u00fcgung.
implementationDependencyMessageArgumentJavaVariableNameUniquenessConstraint=Argument ''{4}'' der Meldung ''{3}'' der Anforderung ''{2}'' der Implementierung ''{0}'' in Modul ''{1}'' stellt mehrdeutigen, bereits von Argument ''{6}'' zur Verf\u00fcgung gestellten, Java-Variablen-Namen ''{5}'' zur Verf\u00fcgung.
implementationDependencyJavaConstantNameUniquenessConstraint=Anforderung ''{2}'' ({3}) der Implementierung ''{0}'' aus Modul ''{1}'' stellt mehrdeutigen, bereits von Anforderung ''{4}'' ({5}) zur Verf\u00fcgung gestellten, Java-Konstanten-Namen ''{6}'' zur Verf\u00fcgung.
implementationDependencyJavaGetterMethodNameUniquenessConstraint=Anforderung ''{2}'' ({3}) der Implementierung ''{0}'' aus Modul ''{1}'' stellt mehrdeutigen, bereits von Anforderung ''{4}'' ({5}) zur Verf\u00fcgung gestellten, Java-Zugriffsmethoden-Namen ''{6}'' zur Verf\u00fcgung.
implementationDependencyJavaSetterMethodNameUniquenessConstraint=Anforderung ''{2}'' ({3}) der Implementierung ''{0}'' aus Modul ''{1}'' stellt mehrdeutigen, bereits von Anforderung ''{4}'' ({5}) zur Verf\u00fcgung gestellten, Java-Zugriffsmethoden-Namen ''{6}'' zur Verf\u00fcgung.
implementationDependencyJavaVariableNameUniquenessConstraint=Anforderung ''{2}'' ({3}) der Implementierung ''{0}'' aus Modul ''{1}'' stellt mehrdeutigen, bereits von Anforderung ''{4}'' ({5}) zur Verf\u00fcgung gestellten, Java-Variablen-Namen ''{6}'' zur Verf\u00fcgung.
implementationMessageJavaConstantNameUniquenessConstraint=Meldung ''{2}'' ({3}) der Implementierung ''{0}'' aus Modul ''{1}'' stellt mehrdeutigen, bereits von Meldung ''{4}'' ({5}) zur Verf\u00fcgung gestellten, Java-Konstanten-Namen ''{6}'' zur Verf\u00fcgung.
implementationMessageJavaGetterMethodNameUniquenessConstraint=Meldung ''{2}'' ({3}) der Implementierung ''{0}'' aus Modul ''{1}'' stellt mehrdeutigen, bereits von Meldung ''{4}'' ({5}) zur Verf\u00fcgung gestellten, Java-Zugriffsmethoden-Namen ''{6}'' zur Verf\u00fcgung.
implementationMessageJavaSetterMethodNameUniquenessConstraint=Meldung ''{2}'' ({3}) der Implementierung ''{0}'' aus Modul ''{1}'' stellt mehrdeutigen, bereits von Meldung ''{4}'' ({5}) zur Verf\u00fcgung gestellten, Java-Zugriffsmethoden-Namen ''{6}'' zur Verf\u00fcgung.
implementationMessageJavaVariableNameUniquenessConstraint=Meldung ''{2}'' ({3}) der Implementierung ''{0}'' aus Modul ''{1}'' stellt mehrdeutigen, bereits von Meldung ''{4}'' ({5}) zur Verf\u00fcgung gestellten, Java-Variablen-Namen ''{6}'' zur Verf\u00fcgung.
implementationPropertyJavaConstantNameUniquenessConstraint=Eigenschaft ''{2}'' ({3}) der Implementierung ''{0}'' aus Modul ''{1}'' stellt mehrdeutigen, bereits von Eigenschaft ''{4}'' ({5}) zur Verf\u00fcgung gestellten, Java-Konstanten-Namen ''{6}'' zur Verf\u00fcgung.
implementationPropertyJavaGetterMethodNameUniquenessConstraint=Eigenschaft ''{2}'' ({3}) der Implementierung ''{0}'' aus Modul ''{1}'' stellt mehrdeutigen, bereits von Eigenschaft ''{4}'' ({5}) zur Verf\u00fcgung gestellten, Java-Zugriffsmethoden-Namen ''{6}'' zur Verf\u00fcgung.
implementationPropertyJavaSetterMethodNameUniquenessConstraint=Eigenschaft ''{2}'' ({3}) der Implementierung ''{0}'' aus Modul ''{1}'' stellt mehrdeutigen, bereits von Eigenschaft ''{4}'' ({5}) zur Verf\u00fcgung gestellten, Java-Zugriffsmethoden-Namen ''{6}'' zur Verf\u00fcgung.
implementationPropertyJavaVariableNameUniquenessConstraint=Eigenschaft ''{2}'' ({3}) der Implementierung ''{0}'' aus Modul ''{1}'' stellt mehrdeutigen, bereits von Eigenschaft ''{4}'' ({5}) zur Verf\u00fcgung gestellten, Java-Variablen-Namen ''{6}'' zur Verf\u00fcgung.
