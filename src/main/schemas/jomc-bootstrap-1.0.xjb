<?xml version="1.0" encoding="UTF-8"?>
<!--

  Copyright (c) 2009 The JOMC Project
  Copyright (c) 2005 Christian Schulte <schulte2005@users.sourceforge.net>
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the
      distribution.

  THIS SOFTWARE IS PROVIDED BY THE JOMC PROJECT AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE JOMC PROJECT OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

  $Id$

-->
<jaxb:bindings xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
               xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
               xmlns:xs="http://www.w3.org/2001/XMLSchema"
               xmlns:bootstrap="http://jomc.org/model/bootstrap"
               xmlns:ci="http://jaxb.dev.java.net/plugin/code-injector"
               version="2.0">

  <jaxb:bindings schemaLocation="jomc-bootstrap-1.0.xsd">
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='Schemas']">
      <ci:code><![CDATA[
    /**
     * Gets a schema for a given public identifier from this list of schemas.
     *
     * @param publicId The public identifier of the schema to return.
     *
     * @return The schema with public identifier {@code publicId} from the list or {@code null} if no schema matching
     * {@code publicId} is found.
     *
     * @throws NullPointerException if {@code publicId} is {@code null}.
     *
     * @see #getSchema()
     */
    public Schema getSchemaByPublicId( final String publicId )
    {
        if ( publicId == null )
        {
            throw new NullPointerException( "publicId" );
        }

        for ( Schema s : this.getSchema() )
        {
            if ( publicId.equals( s.getPublicId() ) )
            {
                return s;
            }
        }

        return null;
    }

    /**
     * Gets a schema for a given system identifier from this list of schemas.
     *
     * @param systemId The system identifier of the schema to return.
     *
     * @return The schema with system identifier {@code systemId} from the list or {@code null} if no schema matching
     * {@code systemId} is found.
     *
     * @throws NullPointerException if {@code systemId} is {@code null}.
     *
     * @see #getSchema()
     */
    public Schema getSchemaBySystemId( final String systemId )
    {
        if ( systemId == null )
        {
            throw new NullPointerException( "systemId" );
        }

        for ( Schema s : this.getSchema() )
        {
            if ( systemId.equals( s.getSystemId() ) )
            {
                return s;
            }
        }

        return null;
    }
]]>
      </ci:code>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='Schema']/xs:complexContent/xs:extension/xs:attribute[@name='public-id']">
      <jaxb:property>
        <jaxb:javadoc>The public identifier of the referenced schema.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Schema']/xs:complexContent/xs:extension/xs:attribute[@name='system-id']">
      <jaxb:property>
        <jaxb:javadoc>The system identifier of the referenced schema.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Schema']/xs:complexContent/xs:extension/xs:attribute[@name='context-id']">
      <jaxb:property>
        <jaxb:javadoc>The name of the Java package containing JAXB classes of the referenced schema or {@code null}.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Schema']/xs:complexContent/xs:extension/xs:attribute[@name='classpath-id']">
      <jaxb:property>
        <jaxb:javadoc>The Java classpath location of the referenced schema or {@code null}.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='Services']">
      <ci:code><![CDATA[
    /**
     * Gets all services for a given identifier from this list of services.
     *
     * @param identifier The identifier of the services to return.
     *
     * @return An unmodifiable, sorted list holding services matching {@code identifier} from the list or an empty list
     * if no services matching {@code identifier} are found.
     *
     * @throws NullPointerException if {@code identifier} is {@code null}.
     *
     * @see #getService()
     */
    public List<Service> getServices( final String identifier )
    {
        if ( identifier == null )
        {
            throw new NullPointerException( "identifier" );
        }

        final java.util.List<Service> services = new java.util.ArrayList<Service>( this.getService().size() );

        for ( Service s : this.getService() )
        {
            if ( identifier.equals( s.getIdentifier() ) )
            {
                services.add( s );
            }
        }

        java.util.Collections.sort( services, new java.util.Comparator<Service>()
        {

            public int compare( final Service s1, final Service s2 )
            {
                return s1.getOrdinal() - s2.getOrdinal();
            }

        } );

        return java.util.Collections.unmodifiableList( services );
    }

    /**
     * Gets all services for a given class from this list of services.
     *
     * @param clazz The class of the services to return.
     *
     * @return An unmodifiable, sorted list holding services matching {@code class} from the list or an empty list
     * if no services matching {@code clazz} are found.
     *
     * @throws NullPointerException if {@code clazz} is {@code null}.
     *
     * @see #getService()
     */
    public List<Service> getServices( final Class<?> clazz )
    {
        if ( clazz == null )
        {
            throw new NullPointerException( "clazz" );
        }

        return this.getServices( clazz.getName() );
    }
]]>
      </ci:code>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='Service']/xs:complexContent/xs:extension/xs:attribute[@name='ordinal']">
      <jaxb:property>
        <jaxb:javadoc>The ordinal number of the service.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Service']/xs:complexContent/xs:extension/xs:attribute[@name='identifier']">
      <jaxb:property>
        <jaxb:javadoc>The identifier of the service.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Service']/xs:complexContent/xs:extension/xs:attribute[@name='class']">
      <jaxb:property>
        <jaxb:javadoc>The class providing the service implementation.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
  </jaxb:bindings>
</jaxb:bindings>
